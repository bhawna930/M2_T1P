#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

const int N = 1000; // Size of the matrices

void generateRandomMatrix(int **matrix, int size) {
    #pragma omp parallel for
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            matrix[i][j] = rand() % 10; // Generate random numbers between 0 and 9
        }
    }
}

void multiplyMatrices(int **A, int **B, int **C, int size) {
    #pragma omp parallel for
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            C[i][j] = 0;
            for (int k = 0; k < size; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void writeMatrixToFile(int **matrix, int size, const char *filename) {
    ofstream outfile(filename);
    if (outfile.is_open()) {
        for (int i = 0; i < size; ++i) {
            for (int j = 0; j < size; ++j) {
                outfile << matrix[i][j] << " ";
            }
            outfile << endl;
        }
        outfile.close();
    } else {
        cerr << "Unable to open file";
    }
}

int main() {
    srand(time(nullptr)); // Seed for random number generation
    int **A, **B, **C;
    A = new int*[N];
    B = new int*[N];
    C = new int*[N];
    for (int i = 0; i < N; ++i) {
        A[i] = new int[N];
        B[i] = new int[N];
        C[i] = new int[N];
    }
    generateRandomMatrix(A, N);
    generateRandomMatrix(B, N);
    clock_t startTime = clock();
    multiplyMatrices(A, B, C, N);
    clock_t endTime = clock();
    double executionTime = double(endTime - startTime) / CLOCKS_PER_SEC;
    cout << "Execution Time: " << executionTime << " seconds." << endl;
    writeMatrixToFile(C, N, "result_openmp.txt");
    for (int i = 0; i < N; ++i) {
        delete [] A[i];
        delete [] B[i];
        delete [] C[i];
    }
    delete [] A;
    delete [] B;
    delete [] C;
    return 0;
}
